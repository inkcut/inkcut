"""
Copyright (c) 2019, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

Created on Feb 2, 2019

@author: jrm
"""
from enaml.qt.QtCore import Qt
from enaml.qt.QtWidgets import QApplication, QPlainTextEdit
from enaml.qt.QtGui import QTextCursor
from enaml.widgets.api import  (
    Action, Container, RawWidget, Field, PushButton, ObjectCombo, Menu
)
from enaml.application import deferred_call
from enaml.layout.api import vbox, align, hbox
from enamlx.widgets.api import KeyEvent
from inkcut.core.api import DockItem
from inkcut.core.utils import load_icon


class PlainTextEdit(RawWidget):
    """ QTextEdit used by the MultiLineField is horribly slow at appending
    text. This widget is significantly faster.

    """
    def create_widget(self, parent):
        widget = QPlainTextEdit(parent)
        widget.setReadOnly(True)
        widget.setMaximumBlockCount(1000)
        return widget


enamldef MonitorDockItem(DockItem): view:
    title = QApplication.translate('monitor', 'Monitor')
    name = 'monitor-item'
    icon = load_icon('keyboard')
    attr plugin
    attr device_plugin << plugin.workbench.get_plugin('inkcut.device')
    attr device << device_plugin.device
    attr connection << device.connection if device else None
    attr history_index: int = -1
    attr history_limit: int = 40
    initialized ::
        # On startup observe the device connection's last output
        if connection:
            connection.observe('last_read', watch_output)
            connection.observe('last_write', watch_input)

    connection ::
        # When the device connection changes, cleanup, and observe the new last output
        old = change['oldvalue']
        new = change['value']
        if old:
            old.unobserve('last_read', watch_output)
            old.unobserve('last_write', watch_input)
        if new:
            new.observe('last_read', watch_output)
            new.observe('last_write', watch_output)

    func watch_output(change):
        if not plugin.output_enabled:
            return
        widget = comm_log.proxy.widget
        try:
            msg = change['value'].decode()
            widget.insertPlainText(msg.strip() if plugin.strip_whitespace else msg)
            scroll_to_end()
        except:
            pass  # Ignore decode errors

    func watch_input(change):
        if not plugin.input_enabled:
            return
        widget = comm_log.proxy.widget
        try:
            msg = change['value'].decode()
            msg = msg.remove('\r')
            widget.appendPlainText(msg.strip() if plugin.strip_whitespace else msg)
        except:
            pass  # Ignore decode errors

    func scroll_to_end():
        if not plugin.autoscroll:
            return
        # Scroll to end
        widget = comm_log.proxy.widget
        scroll_bar = widget.verticalScrollBar()
        scroll_bar.setValue(scroll_bar.maximum())

    func send_text():
        if connection and connection.connected:
            text = to_send.text
            # Add to history
            add_to_history(text)
            connection.protocol.write(text+"\r\n" if plugin.add_newline else text)
            to_send.text = ""

    func add_to_history(text):
        if text:
            # Retain order (most recent first)
            if text in plugin.history:
                plugin.history.remove(text)
            plugin.history.append(text)

            # Keep the size limited
            if len(plugin.history) > history_limit:
                plugin.history.pop(0)
        # Reset
        view.history_index = 0

    Menu:
        context_menu = True
        Action:
            text = QApplication.translate('monitor', "Add newline")
            checkable = True
            checked := plugin.add_newline

    Container:
        constraints = [
                vbox(hbox(cmb_conn, btn_open, btn_clear, btn_autoscroll),
                    comm_log,
                    hbox(to_send, btn_send)),
                align('v_center', cmb_conn, btn_open, btn_clear, btn_autoscroll),
                align('v_center', to_send, btn_send),
        ]

        ObjectCombo: cmb_conn:
            items << device_plugin.devices or [device] if device else []
            to_string = lambda d: d.name if d else ""
            selected << device
            selected ::
                dev = change['value']
                if dev:
                    device_plugin.device = dev
        PushButton: btn_open:
            #text << "Close" if opened else "Open"
            icon << load_icon("disconnect" if connection and connection.connected else "connect")
            tool_tip << "Connected. Click to disconnect" if connection and connection.connected else "Disconnected. Click to Connect"
            clicked ::
                if connection and connection.connected:
                    deferred_call(device.disconnect)
                else:
                    deferred_call(device.connect)
        PushButton: btn_clear:
            icon = load_icon("bin")
            tool_tip = QApplication.translate('monitor', "Clear console")
            clicked :: comm_log.proxy.widget.clear()
        PushButton: btn_autoscroll:
            icon << load_icon("lock_open") if plugin.autoscroll else load_icon("lock")
            tool_tip = QApplication.translate('monitor', "Auto scroll")
            checkable = True
            checked := plugin.autoscroll
        PlainTextEdit: comm_log:
            # Expand
            hug_width = 'ignore'
            hug_height = 'ignore'

        Field: to_send:
            enabled << bool(connection and connection.connected)
            placeholder << "Enter a command.." if enabled else "Disconnected... reconnect first."
            tool_tip = QApplication.translate('monitor', "Press enter to send")
            KeyEvent:
                keys = ['return']
                released :: send_text()
            KeyEvent:
                released ::
                    code = change['value']['code']
                    if len(plugin.history):
                        if code == Qt.Key_Up:
                            n = len(plugin.history)
                            view.history_index = max(-n, history_index-1)
                            to_send.text = plugin.history[view.history_index]
                        elif code == Qt.Key_Down:
                            view.history_index = min(0, history_index+1)
                            if view.history_index == 0:
                                to_send.text = ""
                            else:
                                to_send.text = plugin.history[view.history_index]

        PushButton: btn_send:
            text = QApplication.translate('monitor', "Send")
            enabled << bool(connection and connection.connected)
            clicked :: send_text()
